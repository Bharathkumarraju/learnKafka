Description: ZooKeeper Compute - Kafka Operations and Monitoring Course - (c) Stephane
  Maarek, DataCumulus.
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-e99f4896
    ap-northeast-2:
      AMI: ami-afd86dc1
    ap-northeast-3:
      AMI: ami-32b8b64f
    ap-south-1:
      AMI: ami-d783a9b8
    ap-southeast-1:
      AMI: ami-05868579
    ap-southeast-2:
      AMI: ami-39f8215b
    ca-central-1:
      AMI: ami-0ee86a6a
    cn-north-1:
      AMI: ami-ffd00992
    cn-northwest-1:
      AMI: ami-965d4af4
    eu-central-1:
      AMI: ami-7c4f7097
    eu-west-1:
      AMI: ami-466768ac
    eu-west-2:
      AMI: ami-b8b45ddf
    eu-west-3:
      AMI: ami-2cf54551
    sa-east-1:
      AMI: ami-6dca9001
    us-east-1:
      AMI: ami-b70554c8
    us-east-2:
      AMI: ami-8c122be9
    us-west-1:
      AMI: ami-e0ba5c83
    us-west-2:
      AMI: ami-a9d09ed1
Parameters:
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: Instance Type for your EC2 machine
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  VolumeAttachment:
    Properties:
      Device: /dev/sdf
      InstanceId:
        Ref: Zookeeper1EC2
      VolumeId:
        Fn::ImportValue: Zookeeper1EBS
    Type: AWS::EC2::VolumeAttachment
  Zookeeper1EC2:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            0_attach_format_ebs:
              command: /usr/local/bin/attach_format_ebs
              ignoreErrors: 'false'
            1_set_swappiness:
              command: /usr/local/bin/set_swappiness
              ignoreErrors: 'false'
            2_download_extract_kafka:
              command: /usr/local/bin/setup_kafka_bin
              ignoreErrors: 'false'
            3_start_zookeeper_service:
              command: /usr/local/bin/start_zookeeper
              ignoreErrors: 'false'
            4_tweak_bash_profile:
              command: /usr/local/bin/add_to_bash_profile
              ignoreErrors: 'false'
          files:
            /etc/systemd/system/zookeeper.service:
              content: |
                [Unit]
                Description=Zookeeper
                After=network.target

                [Service]
                User=ec2-user
                Group=ec2-user
                SyslogIdentifier=zookeeper
                ExecStart=/home/ec2-user/kafka/bin/zookeeper-server-start.sh /home/ec2-user/zookeeper.properties
                SuccessExitStatus=143

                [Install]
                WantedBy=multi-user.target
              group: root
              mode: '000755'
              owner: root
            /home/ec2-user/zookeeper.properties:
              content:
                Fn::Sub:
                  - |
                    # zookeeper.properties
                    dataDir=/data/zookeeper
                    # the port at which the clients will connect
                    clientPort=2181
                    # disable the per-ip limit on the number of connections since this is a non-production config
                    maxClientCnxns=0
                    # Use provided DNS
                    server.1=${zk1_ip}:2888:3888
                  - zk1_ip:
                      Fn::ImportValue: Zookeeper1IP
              group: ec2-user
              mode: '000644'
              owner: ec2-user
            /usr/local/bin/add_to_bash_profile:
              content: |
                #!/bin/bash -xe
                cat << "EOF" >> /home/ec2-user/.bash_profile
                DAEMON_PATH=/home/ec2-user/kafka/bin
                export PATH=$PATH:$DAEMON_PATH
                export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"
                EOF
              group: root
              mode: '000755'
              owner: root
            /usr/local/bin/attach_format_ebs:
              content: |
                #!/bin/bash -xe

                #
                # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
                #
                # Make sure both volumes have been created AND attached to this instance !

                ######################################################################

                while [ ! -e /dev/xvdf ] ; do echo "Waiting for attachment"; sleep 1 ; done

                # Format /dev/xvdf if it does not contain a partition yet
                if [ "$(file -b -s /dev/xvdf)" == "data" ]; then
                  mkfs.xfs -f /dev/xvdf
                fi

                mkdir -p /data/zookeeper
                mount -t xfs /dev/xvdf /data/zookeeper
                chown -R ec2-user:ec2-user /data/zookeeper

                # Persist the volume in /etc/fstab so it gets mounted again
                echo '/dev/xvdf /data/zookeeper xfs defaults 0 0' >> /etc/fstab
              group: root
              mode: '000755'
              owner: root
            /usr/local/bin/set_swappiness:
              content: |
                #!/bin/bash -xe
                sysctl vm.swappiness=1
                echo 'vm.swappiness=1' | sudo tee --append /etc/sysctl.conf
              group: root
              mode: '000755'
              owner: root
            /usr/local/bin/setup_kafka_bin:
              content: |
                #!/bin/bash -xe
                wget -P /home/ec2-user https://archive.apache.org/dist/kafka/1.1.1/kafka_2.12-1.1.1.tgz
                tar xf /home/ec2-user/kafka_2.12-1.1.1.tgz -C /home/ec2-user
                ln -s /home/ec2-user/kafka_2.12-1.1.1 /home/ec2-user/kafka
                chown -R ec2-user:ec2-user /home/ec2-user/kafka /home/ec2-user/kafka_2.12-1.1.1
                rm /home/ec2-user/kafka_2.12-1.1.1.tgz
              group: root
              mode: '000755'
              owner: root
            /usr/local/bin/start_zookeeper:
              content: |
                #!/bin/bash -xe
                systemctl enable zookeeper.service
                systemctl start zookeeper.service
              group: root
              mode: '000755'
              owner: root
          packages:
            yum:
              ca-certificates: {}
              java-1.8.0-openjdk: {}
              net-tools: {}
              tar: {}
              wget: {}
              xfsprogs: {}
              zip: {}
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - AMI
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId:
            Fn::ImportValue: Zookeeper1ENI
      Tags:
        - Key: Name
          Value: Zookeeper 1
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r Zookeeper1EC2 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Zookeeper1EC2Wait --region ${AWS::Region}
    Type: AWS::EC2::Instance
  Zookeeper1EC2Wait:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Type: AWS::CloudFormation::WaitCondition
